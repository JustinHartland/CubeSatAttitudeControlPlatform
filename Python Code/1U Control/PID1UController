import time
import board
import busio
import adafruit_lsm9ds1
import odrive
import math
from odrive.enums import *
from simple_pid import PID

# Find a connected ODrive (this will block until you connect one)
print("finding an odrive...")
my_drive = odrive.find_any()

# Calibrate motor and wait for it to finish
print("starting calibration...")
my_drive.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
while my_drive.axis0.current_state != AXIS_STATE_IDLE:
    time.sleep(0.1)

my_drive.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
my_drive.axis0.controller.config.control_mode = CONTROL_MODE_TORQUE_CONTROL

# Initialize I2C bus and sensor
i2c = board.I2C()
sensor = adafruit_lsm9ds1.LSM9DS1_I2C(i2c)

# Function to calibrate gyroscope
def calibrate_gyro(num_samples=100):
    gyro_offset_x, gyro_offset_y, gyro_offset_z = 0.0, 0.0, 0.0

    print("Calibrating gyroscope...")
    for _ in range(num_samples):
        gyro_x, gyro_y, gyro_z = sensor.gyro
        gyro_offset_x += gyro_x
        gyro_offset_y += gyro_y
        gyro_offset_z += gyro_z
        time.sleep(0.01)  # Sleep for a while to reduce sampling rate

    # Calculate average offsets
    gyro_offset_x /= num_samples
    gyro_offset_y /= num_samples
    gyro_offset_z /= num_samples

    print("Calibration complete")
    return gyro_offset_x, gyro_offset_y, gyro_offset_z

# Calibrate gyroscope
gyro_offset_x, gyro_offset_y, gyro_offset_z = calibrate_gyro()

# Initial angles
roll, pitch, yaw = 0.0, 0.0, 0.0

# Time initialization
last_time = time.time()

#PID Controller Setup
targetAngle = 0                                     #Set target orientation angle here
pid = PID(-0.03, 0, 0, setpoint = targetAngle)       #Configure PID constants, and target
pid.output_limits = (-20, 20)                          #Set limits on torque

def getOrientationAngles(prev_time):
    # Read gyroscope data and subtract biases
    gyro_x, gyro_y, gyro_z = sensor.gyro
    gyro_x -= gyro_offset_x
    gyro_y -= gyro_offset_y
    gyro_z -= gyro_offset_z

    # Get the time difference
    current_time = time.time()
    dt = current_time - prev_time
    prev_time = current_time

    # Integrate the gyroscope data
    roll += gyro_x * dt
    pitch += gyro_y * dt
    yaw += gyro_z * dt

    # Print angular positions
    print(f'Yaw: {yaw:.2f}')

    return yaw

try:
    while True:
        curr_Time = time.time()

        yaw = getOrientationAngles(last_time)

        #Set control torque
        if yaw > -5 and yaw < 5:
            controlTorque = 0
        elif yaw >= 5:
            controlTorque = pid(yaw)
        elif yaw <= -5:
            controlTorque = pid(yaw)

        #Set motor current to control torque
        my_drive.axis0.controller.input_torque = controlTorque

        # Sleep for a while to reduce the update rate
        time.sleep(0.01)

except KeyboardInterrupt:
    pass

my_drive.axis0.controller.config.control_mode = CONTROL_MODE_VELOCITY_CONTROL
my_drive.axis0.controller.input_vel(0)